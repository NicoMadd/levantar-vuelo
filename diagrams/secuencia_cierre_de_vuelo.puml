@startuml Secuencia Cierre de vuelo

actor Usuario
participant Vuelos.Worker
database Vuelos.DB
database Reservas.Worker
database Reservas.DB
participant Usuario.Interface.Worker



== Al agregar un nuevo vuelo ==
Vuelos.Worker -> Vuelos.DB: Agregar vuelo
activate Vuelos.DB
Vuelos.DB -> Vuelos.DB: send_after(cerrar_vuelo,vuelo,tiempo de oferta)
deactivate Vuelos.DB
== Al asignar asientos a un vuelo ==
Vuelos.Worker -> Vuelos.DB: Asignar asientos \n vuelo + asientos
activate Vuelos.Worker
Vuelos.Worker <-- Vuelos.DB: Asientos asignados
note left: Evalua si el vuelo esta completo.\nSi lo esta lo cierra
Vuelos.Worker ->> Vuelos.DB: Cerrar vuelo
deactivate Vuelos.Worker

newpage

== Cerrar vuelo == 
Vuelos.DB ->> Reservas.Worker: Notificar cierre de vuelo
note left: Ya sea por el send_after \no el cierre computado se \nprocede con lo siguiente.
Reservas.Worker -> Reservas.DB: Cancelar reservas\n vuelo
Reservas.Worker <-- Reservas.DB: Reservas canceladas
Reservas.Worker -> Usuario.Interface.Worker: Notificar cancelacion de reserva
Usuario.Interface.Worker -> Usuario: Notificar cancelacion de reserva



@enduml
